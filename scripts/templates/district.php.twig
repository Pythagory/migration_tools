<?php

/**
 * @file
 * Defines migration classes for {{ info.full_name }}.
 */

/**
 * Migrates .html files from /{{ info.abbreviation }} to page nodes.
 *
 * @package doj_migration
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class }}PageMigration extends NGJusticeHtmlToPageMigration {

  /**
   * {@inheritdoc}
   */
  public function __construct($arguments) {

    // Define source directories.
    $source_dirs = array(
    {% for item in info.page %}
      {{ item | raw }}
    {% endfor %}
    );

    $arguments['source_parser_class'] = "{{ info.class }}PageSourceParser";
    
     // Configuring Obtainers.
    $title = new ObtainerInfo('title', "{{ info.class }}ObtainTitlePage");
    $title->addMethod('findH1First');
    $title->addMethod('findH1Any');
    $title->addMethod('findClassBreadcrumbLast');
    $title->addMethod('findClassBreadcrumbMenuContentLast');
    $title->addMethod('findSubBannerAlt');

    $arguments['obtainers_info'][] = $title;

    $options = array('recurse' => FALSE);

    // Parent constructor will set $this->source, $this->destination, and
    // $this->map.
    parent::__construct($arguments, $source_dirs, NULL, $options);
    $this->dependencies = array('UsaoDistrict');
    $this->description = t('Migrates pages from the {{ info.full_name }}.');
    $this->addFieldMapping('og_group_ref')
    ->defaultValue('{{ info.abbreviation }}')
    ->sourceMigration('UsaoDistrict');
  }

  /**
   * {@inheritdoc}
   */
  public function prepareRow($row) {
    if (parent::prepareRow($row) === FALSE) {
      return FALSE;
    }
  }
}

/**
 * Migrates files (*.pdf) from /{{ info.abbreviation }}.
 *
 * @package doj_migration
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class }}FileMigration extends JusticeDeployableBinaryFileMigration {

  /**
   * {@inheritdoc}
   */
  public function __construct($arguments) {
    $this->description = t('Migrates non-image files from the {{ info.directory }} subdirectory.');
    $this->dependencies = array('UsaoDistrict');

    // Match .pdf files only.
    $source_dirs = array(
      '{{ info.directory }}',
    );

    $regex = '/.*\.(pdf|txt|rtf|doc|docx|xls|xlsx|csv|mp3|mp4|wpd|wp|qpw|xml|ppt|pptx)/';
    $dest_dir = 'public:///{{ info.abbreviation }}/docs';

    $options = array('recurse' => TRUE);

    // This will setup $this->map, $this->destination, and $this->source.
    // It will also add field mappings for file location and redirects, which
    // relies on prepareRow() defining $row->filepath and $row->legacy_path.
    parent::__construct($arguments, $source_dirs, $dest_dir, $regex, $options);
  }


  /**
   * {@inheritdoc}
   */
  public function getOrganizationAbbreviation() {
    return "{{ info.abbreviation }}";
  }
}

/**
 * Migrates press releases from /{{ info.abbreviation }}.
 *
 * @package doj_migration
 * @subpackage {{ info.abbreviation }}
 */
class {{ info.class }}PressReleaseMigration extends NGDistrictPressReleaseMigration {

  /**
   * {@inheritdoc}
   */
  public function __construct($arguments) {
    $arguments['district'] = "{{ info.abbreviation }}";
    $arguments['component_tid'] = {{ info.component_tid }};
    $arguments['source_parser_class'] = "{{ info.class }}PressSourceParser";

    // Configuring Obtainers.
    $title = new ObtainerInfo('title', "{{ info.class }}ObtainTitlePress");
    $title->addMethod('findH1Any');
    $title->addMethod('findIdContentstartDivH2Sec');
    $title->addMethod('findH2First');
    $title->addMethod('findClassContentSubDivPCenterStrong');
    $title->addMethod('findClassContentSubDivDivPStrong');
    $title->addMethod('findIdHeadline');
    $title->addMethod('findPStrongEm');
    $title->addMethod('findIdContentstartDivH2');
    $title->addMethod('findDivClassContentSubDivDivCenter');

    $date = new ObtainerInfo('date', "{{ info.class }}ObtainDate");
    $date->addMethod('findTableRow1Col2');
    $date->addMethod('findTableRow1Col1');
    $date->addMethod('findTable2Row2Col2');
    $date->addMethod('findPAlignCenter');
    $date->addMethod('findIdContentstartFirst');
    $date->addMethod('findClassNewsRight');
    $date->addMethod('findClassBottomLeftContent');
    $date->addMethod('findProbableDate');

    $arguments['obtainers_info'][] = $title;
    $arguments['obtainers_info'][] = $date;
    
    $source_dirs = array(
    {% for item in info.press %}
      {{ item | raw }}
    {% endfor %}
    );
    parent::__construct($arguments, $source_dirs);
  }
}

class {{ info.class }}PageSourceParser  extends NGDistrictPageSourceParser {
  /**
   * {@inheritdoc}
   */
  protected function cleanHtml() {
    parent::cleanHtml();
  }
}

class {{ info.class }}PressSourceParser extends NGDistrictPressReleaseSourceParser {
  /**
   * {@inheritdoc}
   */
  protected function cleanHtml() {
    parent::cleanHtml();
  }
}

class {{ info.class }}ObtainTitlePage extends ObtainTitle {
}

class {{ info.class }}ObtainTitlePress extends ObtainTitlePressRelease {
}

class {{ info.class }}ObtainDate extends ObtainDate {
}
