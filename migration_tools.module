<?php

/**
 * @file
 * THIS SPACE INTENTIONALLY LEFT BLANK.
 *
 * Yes, there is no code in the .module file. Migrate operates almost entirely
 * through classes, and by adding any files containing class definitions to the
 * .info file, those files are automatically included only when the classes they
 * contain are referenced. The one non-class piece you need to implement is
 * hook_migrate_api(), but because .migrate.inc is registered using
 * hook_hook_info by defining your implementation of that hook in
 * mymodule.migrate.inc, it is automatically invoked only when needed.
 *
 * @package migration_tools
 */

/**
 * Implements hook_menu_alter().
 */
function migration_tools_menu_alter(&$items) {
  // Viewing this page calls the contstructors for all registered migration
  // classes, overwhelming PHP memory limit. We cannot disable migrate_ui
  // due to wordpress_migrate dependency on it, so we will instead unset this
  // menu router item.
  if (variable_get("doj_migrate_ui_disabled", TRUE)) {
    unset($items['admin/content/migrate']);
  }
}

/**
 * Set workbench configuration for entity.
 *
 * This fixes a number of bugs that result from workbench revisions failing
 * to be created or updated when entities are created or updated.
 */
function migration_tools_prepare_workbench_settings($entity, $row) {
  $entity->is_new = !isset($row->migrate_map_needs_update);
  $entity->revision = TRUE;
  $entity->workbench_moderation_state_current = 'published';
  $entity->workbench_moderation_state_new = 'published';
}

/**
 * Ensure imported node revision is marked published (status = 1).
 *
 * This fixes a migrate/workbench issue where imported
 * published nodes have node_revision.status == 0.
 *
 * Must use db_query() as db_update() doesn't implement join().
 */
function migration_tools_complete_workbench_settings($entity, $row) {
  db_query("UPDATE {node_revision} nr
JOIN {node} n ON (n.vid = nr.vid AND n.nid = :nid)
SET nr.status = 1 WHERE n.status = 1 AND nr.status = 0",
    array(':nid' => $entity->nid));
}

/**
 * Implements hook_module_implements_alter().
 */
function migration_tools_module_implements_alter(&$implementations, $hook) {
  global $_migration_tools_is_running;

  // Sadly, we cannot use the migrate module's $disable_hooks to disable
  // hook_node_update() from firing on `drush migrate-import` because
  // hook_node_update() is triggered too late, at which point
  // Migration::currentMigration() returns FALSE. This is due to workbench
  // moderation calling node_update() from a shutdown function.
  if (class_exists('Migration') && $migration = Migration::currentMigration()) {
    $_migration_tools_is_running = TRUE;
  }

  if (in_array($hook, array('node_update', 'node_insert')) && $_migration_tools_is_running) {
    unset($implementations['akamai']);
    unset($implementations['expire']);
  }
}
