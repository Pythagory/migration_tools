<?php

/**
 * @file
 * THIS SPACE INTENTIONALLY LEFT BLANK.
 *
 * Yes, there is no code in the .module file. Migrate operates almost entirely
 * through classes, and by adding any files containing class definitions to the
 * .info file, those files are automatically included only when the classes they
 * contain are referenced. The one non-class piece you need to implement is
 * hook_migrate_api(), but because .migrate.inc is registered using
 * hook_hook_info by defining your implementation of that hook in
 * mymodule.migrate.inc, it is automatically invoked only when needed.
 *
 * @package doj_migration
 */

/**
 * Implements hook_menu_alter().
 */
function doj_migration_menu_alter(&$items) {
  // Viewing this page calls the contstructors for all registered migration
  // classes, overwhelming PHP memory limit. We cannot disable migrate_ui
  // due to wordpress_migrate dependency on it, so we will instead unset this
  // menu router item.
  unset($items['admin/content/migrate']);
}
/**
 * Move all the images from a directory tree to an output directory.
 *
 * The directory strucuture in the output directory will be an exact match of
 * the directory structury from the source directory.
 *
 * @param string $parent_input_directory
 *   The parent directory where anothe directory with images is located.
 * @param string $directory
 *   The directory that contains images.
 * @param string $parent_output_directory
 *   The directory where we want to save all the images.
 */
function doj_migration_move_images($parent_input_directory, $directory, $parent_output_directory) {

  // Make the directory where our files will go.
  $final_output_directory = "$parent_output_directory/$directory";

  // Get all files from the source directory.
  $final_input_directory = "$parent_input_directory/$directory";
  $files = scandir($final_input_directory);

  foreach ($files as $file) {
    $ext = pathinfo("$final_input_directory/$file", PATHINFO_EXTENSION);

    // If any of the files are images, copy them.
    if ($ext == "gif" || $ext == "png" || $ext == "jpg") {
      // We only want to create the output directory if we have images.
      if (!file_exists($final_output_directory)) {
        mkdir($final_output_directory, 0777, TRUE);
      }

      watchdog("doj_migration", "FILE: @file EXT: @ext \n", array('@file' => $file, 'ext' => $ext));

      if (copy("$final_input_directory/$file", "$final_output_directory/$file")) {
        watchdog("doj_migration", "File @file was copied to $final_output_directory \n", array('@file' => $file));
      }
      else {
        watchdog("doj_migration", "There was an error copying @file \n", array('@file' => $file), WATCHDOG_ERROR);
      }
    }
    // If we are dealing with a directory, let's recurse.
    elseif (is_dir("$final_input_directory/$file") && "{$file}" != "." && "{$file}" != "..") {
      watchdog("doj_migration", "Found a directory {$file} \n");
      doj_migration_move_images($final_input_directory, $file, $final_output_directory);
    }
  }
}

/**
 * Set workbench configration for entity.
 *
 * This fixes a number of bugs that result from worbench revisions failing
 * to be created or updated when entities are created or updated.
 */
function doj_migration_prepare_workbench_settings($entity, $row) {
  $entity->is_new = !isset($row->migrate_map_needs_update);
  $entity->revision = TRUE;
  $entity->workbench_moderation_state_current = 'published';
  $entity->workbench_moderation_state_new = 'published';
}

/**
 * Ensure imported node revision is marked published (status = 1).
 *
 * This fixes a migrate/workbench issue where imported
 * published nodes have node_revision.status == 0.
 *
 * Must use db_query() as db_update() doesn't implement join().
 */
function doj_migration_complete_workbench_settings($entity, $row) {
  db_query("UPDATE {node_revision} nr
JOIN {node} n ON (n.vid = nr.vid AND n.nid = :nid)
SET nr.status = 1 WHERE n.status = 1 AND nr.status = 0",
    array(':nid' => $entity->nid));
}
